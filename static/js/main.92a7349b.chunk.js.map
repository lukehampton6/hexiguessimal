{"version":3,"sources":["utils/actions.js","components/RandomColor.js","components/GenerateColors.js","utils/reducers.js","utils/store.js","App.js","reportWebVitals.js","index.js"],"names":["UPDATE_GUESS","RandomColor","mappedColor","correctColor","useState","show","setShow","dispatch","useDispatch","className","onClick","playerGuess","type","guessValue","style","backgroundColor","GenerateColors","useSelector","state","mode","setMode","generateColor","randomColor","length","Math","round","random","toString","colorArray","i","newColor","push","generateColorArray","shuffledColors","sort","difficultySelect","num","map","reducer","action","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","App","store","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAAaA,EAAe,e,OCyBbC,MArBf,YAAmD,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,aAC/B,EAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAWC,cAcjB,OACI,oBAAIC,UAAWJ,EAAO,kBAAoB,WAAYK,QAAS,WAZrD,IAASC,KAYwDT,KAXvDC,EAChBI,EAAS,CACLK,KAAMZ,EACNa,WAAY,YAETF,IAAgBR,GACvBG,GAAQ,IAK8EQ,MAAO,CAACC,gBAAiBb,MCsD5Gc,MAtEf,WACI,IAAMH,EAAaI,aAAY,SAACC,GAAD,OAAWA,EAAML,cAChD,EAAwBT,mBAAS,GAAjC,mBAAOe,EAAP,KAAaC,EAAb,KACMb,EAAWC,cAGE,YAAfK,GACAN,EAAS,CACLK,KAAMZ,EACNa,WAAY,SAKpB,IAAMQ,EAAgB,WAEnB,IADA,IAAIC,EAAc,IACXA,EAAYC,OAAS,GACxBD,GAAgBE,KAAKC,MAAsB,GAAhBD,KAAKE,UAAgBC,SAAS,IAE7D,OAAOL,GAIJnB,EAAekB,IACfO,EAAa,IAGQ,WACvB,IAAK,IAAIC,EAAI,EAAGA,EAAIV,EAAMU,IAAK,CAC3B,IAAMC,EAAWT,IACjBO,EAAWG,KAAKD,IAGxBE,GAGAJ,EAAWG,KAAK5B,GAChB,IAAM8B,EAAiBL,EAAWM,MAAK,kBAAMV,KAAKE,SAAW,MAEvDS,EAAmB,SAASC,GAC9BhB,EAAQgB,IAGZ,OACI,gCACI,oBAAI3B,UAAU,SAAd,2BACA,qBAAKA,UAAU,YAAf,SACA,qBAAIA,UAAU,WAAd,UACI,oBAAIA,UAAU,OAAOC,QAAS,kBAAMyB,EAAiB,IAArD,kBACA,oBAAI1B,UAAU,OAAOC,QAAS,kBAAMyB,EAAiB,IAArD,oBACA,oBAAI1B,UAAU,OAAOC,QAAS,kBAAMyB,EAAiB,IAArD,uBAGJ,oBAAI1B,UAAU,UAAd,SAAyBN,IACzB,8BACI,oBAAIM,UAAU,YAAd,SACHwB,EAAeI,KAAI,SAACnC,GACjB,OACI,cAAC,EAAD,CACAA,YAAaA,EACbC,aAAcA,GAFID,c,cC3DzBoC,EAAU,SAACpB,EAAOqB,GAC3B,OAAQA,EAAO3B,OACNZ,EACM,2BACAkB,GADP,IAEIL,WAAY0B,EAAO1B,aAGhBK,GCTnB,IAIesB,cACbF,EALmB,CACnBzB,WAAY,QAMZ4B,OAAOC,8BAAgCD,OAAOC,gCCGjCC,MARf,WACE,OACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,OCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.92a7349b.chunk.js","sourcesContent":["export const UPDATE_GUESS = \"UPDATE_GUESS\";","import {useState} from 'react'\nimport { useDispatch } from \"react-redux\";\nimport { UPDATE_GUESS } from '../utils/actions';\n\nfunction RandomColor({mappedColor, correctColor}) {\n    const [show, setShow] = useState(false);\n    const dispatch = useDispatch();\n\n    //check hex for clicked choice\n    const click = function(playerGuess) {\n        if (playerGuess === correctColor) {\n            dispatch({\n                type: UPDATE_GUESS,\n                guessValue: \"correct\"\n            })\n        } else if (playerGuess !== correctColor) {\n            setShow(true)\n        }\n    }\n\n    return (\n        <li className={show ? 'hidden colorDiv' : 'colorDiv'} onClick={() => click(mappedColor)}  style={{backgroundColor: mappedColor}}></li>\n    )\n}\n\nexport default RandomColor;","import { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { UPDATE_GUESS } from '../utils/actions';\nimport RandomColor from \"./RandomColor\";\n\nfunction GenerateColors() {  \n    const guessValue = useSelector((state) => state.guessValue);\n    const [mode, setMode] = useState(2);\n    const dispatch = useDispatch();\n\n    //rerender page if guess was correct\n    if (guessValue === \"correct\") {\n        dispatch({\n            type: UPDATE_GUESS,\n            guessValue: \"none\"\n        });\n    };\n    \n    // generate random hexcode\n    const generateColor = function() {\n       let randomColor = '#'\n       while (randomColor.length < 7) {\n           randomColor += (Math.round(Math.random() * 15)).toString(16)\n       }\n       return randomColor;\n    }\n\n    //store one hexcode for correct choice and create empty array for other hexcodes\n    const correctColor = generateColor();\n    const colorArray = [];\n\n    //create multiple hexcodes for wrong answers and push to array\n    const generateColorArray = function() {\n        for (let i = 0; i < mode; i++) {\n            const newColor = generateColor()\n            colorArray.push(newColor);\n        }\n    }\n    generateColorArray();\n\n    //add correct choice to array then shuffle order\n    colorArray.push(correctColor);\n    const shuffledColors = colorArray.sort(() => Math.random() - 0.5);   \n\n    const difficultySelect = function(num) {\n        setMode(num);\n    };\n\n    return (\n        <div>\n            <h1 className=\"header\">HEXIGUESSIMAL</h1>\n            <div className=\"container\">\n            <ul className=\"modeList\">\n                <li className=\"mode\" onClick={() => difficultySelect(2)}>easy</li>\n                <li className=\"mode\" onClick={() => difficultySelect(5)}>medium</li>\n                <li className=\"mode\" onClick={() => difficultySelect(8)}>hard</li>\n            </ul>\n            </div>\n            <h1 className=\"hexcode\">{correctColor}</h1>\n            <div>\n                <ul className=\"colorList\">\n            {shuffledColors.map((mappedColor) => {\n                return (\n                    <RandomColor key={mappedColor}\n                    mappedColor={mappedColor}\n                    correctColor={correctColor}\n                    />\n                )\n            })}\n            </ul>\n            </div>\n        </div>\n    )\n}\n\nexport default GenerateColors;","import { useReducer } from \"react\";\n\nimport { UPDATE_GUESS } from \"./actions\";\n\nexport const reducer = (state, action) => {\n    switch (action.type) {\n        case UPDATE_GUESS:\n            return {\n                ...state,\n                guessValue: action.guessValue\n            };\n        default:\n            return state;\n    }\n};\n\nexport function useHexReducer(initialState) {\n    return useReducer(reducer, initialState);\n  }","import { createStore } from \"redux\";\nimport { reducer } from './reducers'\n\nconst initialState = {\n  guessValue: \"none\"\n}\n\nexport default createStore(\n  reducer,\n  initialState,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)","import './App.css';\nimport GenerateColors from './components/GenerateColors';\nimport { Provider } from \"react-redux\";\nimport store from \"./utils/store\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <GenerateColors />\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}